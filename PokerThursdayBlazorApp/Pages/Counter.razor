@page "/counter"
@using System.ComponentModel.DataAnnotations
@using PokerThursday
@inject IInMemoryDebtRegister Repo
@inject AddDebt AddDebt

<PageTitle>Debt Register</PageTitle>

<h1>Debt Register</h1>

<table class="table table-active table-bordered table-light table-striped">
    <thead>
        <tr>
            <th>Debtor</th>
            <th>Creditor</th>
            <th>Amount</th>
        </tr>
    </thead>
    <tbody>
        @foreach (DebtSnapshot debt in @Repo.Get().ToSnapshot().Debts)
        {
            <tr>
                <td>@debt.Debtor</td>
                <td>@debt.Creditor</td>
                <td>@debt.Amount</td>
            </tr>
        }
    </tbody>
</table>

<EditForm EditContext="editContext" OnValidSubmit="Add">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <InputText @bind-Value="DebtToAdd.Debtor"></InputText>
    <InputText @bind-Value="DebtToAdd.Creditor"></InputText>
    <InputNumber @bind-Value="DebtToAdd.Amount"></InputNumber>
    <button type="submit" class="btn btn-primary">Add</button>
</EditForm>

@code {

    public DebtToAdd2 DebtToAdd { get; set; } = new();
    private EditContext? editContext;
    private ValidationMessageStore? validationMessageStore;

    protected override void OnInitialized()
    {
        editContext = new(DebtToAdd);
        validationMessageStore = new ValidationMessageStore(editContext);
        editContext.OnFieldChanged += (f, j) => validationMessageStore.Clear();
    }

    private void Add()
    {
        try
        {
            AddDebt.Add(new Debt(DebtToAdd.Debtor, DebtToAdd.Creditor, DebtToAdd.Amount));
        }
        catch (InvalidNameException)
        {
            validationMessageStore!.Add(() => DebtToAdd.Debtor, "Creditor and debitor must be different");
        }
    }

    public class DebtToAdd2
    {
        [Required] public string Debtor { get; set; }
        [Required] public string Creditor { get; set; }
        [Range(1, 1000)] public decimal Amount { get; set; }
    }
}