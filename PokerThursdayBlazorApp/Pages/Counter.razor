@page "/counter"
@using System.ComponentModel.DataAnnotations
@using PokerThursday
@inject IInMemoryDebtRegister Repo
@inject AddDebt AddDebt
@inject PayDebt PayDebt

<PageTitle>Debt Register</PageTitle>

<h1>Debt Register</h1>

<table class="table table-active table-bordered table-light table-striped">
    <thead>
    <tr>
        <th>Debtor</th>
        <th>Creditor</th>
        <th>Amount</th>
    </tr>
    </thead>
    <tbody>
    @foreach (DebtSnapshot debt in Repo.Get().ToSnapshot().Debts)
    {
        <tr>
            <td>@debt.Debtor</td>
            <td>@debt.Creditor</td>
            <td>@debt.Amount</td>
        </tr>
    }
    </tbody>
</table>

<table class="table table-active table-bordered table-light table-striped">
    <thead>
    <tr>
        <th>Debtor</th>
        <th>Creditor</th>
        <th>Amount</th>
    </tr>
    </thead>
    <tbody>
    @foreach (Debt debt in new Suggest().Do(Repo.Get().ExistingDebts.ToArray()))
    {
        <tr>
            <td>@debt.Debtor</td>
            <td>@debt.Creditor</td>
            <td>@debt.Amount</td>
        </tr>
    }
    </tbody>
</table>


<EditForm EditContext="editContextDebtToAdd" OnValidSubmit="Add" FormName="form-add-debt">
    <DataAnnotationsValidator/>
    <InputText @bind-Value="DebtToAdd.Debtor"></InputText>
    <InputText @bind-Value="DebtToAdd.Creditor"></InputText>
    <InputNumber @bind-Value="DebtToAdd.Amount"></InputNumber>
    <button type="submit" class="btn btn-primary">Add</button>
    <ValidationSummary/>
</EditForm>

<hr/>

<EditForm EditContext="editContextDebtToPay" OnValidSubmit="Pay" FormName="form-pay-debt">
    <DataAnnotationsValidator/>
    <InputText @bind-Value="DebtToPay.Debtor"></InputText>
    <InputText @bind-Value="DebtToPay.Creditor"></InputText>
    <InputNumber @bind-Value="DebtToPay.Amount"></InputNumber>
    <button type="submit" class="btn btn-primary">Pay</button>
    <ValidationSummary/>
</EditForm>

@code {

    public DebtToAddModel DebtToAdd { get; set; } = new();
    private EditContext? editContextDebtToAdd;
    private ValidationMessageStore? vmsDebtToAdd;

    public DebtToPayModel DebtToPay { get; set; } = new();
    private EditContext? editContextDebtToPay;
    private ValidationMessageStore? vmsDebtToPay;

    protected override void OnInitialized()
    {
        editContextDebtToAdd = new EditContext(DebtToAdd);
        vmsDebtToAdd = new ValidationMessageStore(editContextDebtToAdd);
        editContextDebtToAdd.OnFieldChanged += (_, _) => vmsDebtToAdd.Clear();

        editContextDebtToPay = new EditContext(DebtToPay);
        vmsDebtToPay = new ValidationMessageStore(editContextDebtToPay);
        editContextDebtToPay.OnFieldChanged += (_, _) => vmsDebtToPay.Clear();
    }

    private void Add()
    {
        try
        {
            AddDebt.Add(new Debt(DebtToAdd.Debtor, DebtToAdd.Creditor, DebtToAdd.Amount));
        }
        catch (InvalidNameException)
        {
            vmsDebtToAdd!.Add(() => DebtToAdd.Debtor, "Creditor and debitor must be different");
        }
    }

    private void Pay()
    {
        try
        {
            PayDebt.Pay(new Debt(DebtToPay.Debtor, DebtToPay.Creditor, DebtToPay.Amount));
        }
        catch (InvalidNameException)
        {
            vmsDebtToPay!.Add(() => DebtToPay.Debtor, "Creditor and debitor must be different");
        }
        catch (PayDebtAmountOverException)
        {
            vmsDebtToPay!.Add(() => DebtToPay.Amount, "Your amount exceeds your debt");
        }
    }

    public class DebtToAddModel
    {
        [Required] public string Debtor { get; set; }
        [Required] public string Creditor { get; set; }
        [Range(1, 1000)] public decimal Amount { get; set; }
    }

    public class DebtToPayModel
    {
        [Required] public string Debtor { get; set; }
        [Required] public string Creditor { get; set; }
        [Range(1, 1000)] public decimal Amount { get; set; }
    }

}